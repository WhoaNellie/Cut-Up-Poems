{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\App.svelte",
    "..\\Words.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n\timport Words from './Words.svelte';\r\n\tlet words = [];\r\n\tlet wordsStr = \r\n`Take a newspaper.\r\nTake some scissors.\r\nChoose from this paper an article of the length you want to make your poem.\r\nCut out the article.\r\nNext carefully cut out each of the words that makes up this article and put them all in a bag.\r\nShake gently.\r\nNext take out each cutting one after the other.\r\nCopy conscientiously in the order in which they left the bag.\r\nThe poem will resemble you.\r\nAnd there you areâ€”an infinitely original author of charming sensibility, even though unappreciated by the vulgar herd.`;\r\n\tlet visibility = \"show\";\r\n\tlet exp = \"hide\";\r\n\r\n\tfunction getWords(){\r\n\t\tvisibility = \"hide\";\r\n\t\twords = [];\r\n\t\t//find test-string for this, possibly add invisible chars?\r\n\t\twords = wordsStr.replace(/[\\s\\x0B\\x0C\\u0085\\u2028\\u2029]+/g, ' ');\r\n\t\twords = words.split(\" \");\r\n\t\t\r\n\t}\r\n\r\n\tfunction expand(){\r\n\r\n\t}\r\n</script>\r\n\r\n\r\n<main>\r\n\t{#if visibility === \"show\"}\r\n\t<div id=\"chooseWords\" class:visibility>\r\n\t\t<h1 class:visibility>To Make a Dadaist Poem</h1>\r\n\t\t<p class:visibility>This is a virtual poetry maker based on Tristan Tzara's instructions! Paste any text below and rearrange to your heart's content.</p>\r\n\t\t<textarea id=\"words\" cols=\"30\" rows=\"10\" bind:value={wordsStr} class:visibility></textarea>\r\n\t\t<button id=\"submitWords\" on:click={getWords} class:visibility>Cut Out</button>\r\n\t</div>\r\n\t{:else if visibility === \"hide\"}\r\n\t\t<button id=\"expand\" on:click={visibility=\"show\"} class:exp>Expand</button>\r\n\t{/if}\r\n\t\r\n\t<Words {words}/>\r\n</main>\r\n<!-- ideas\r\n splash words onto page\r\n shake phone to shuffle\r\n wikipedia api? \r\n menu of what types of words to select\r\n\tparts of speech\r\n\tyes/no curses\r\n\trandom/suggested articles\r\n\tcompletely random\r\n\tfont size\r\n -->\r\n<style>\r\n\t#chooseWords{\r\n\t\tposition: fixed;\r\n\t\ttop: max(30vh, calc(50vh - 250px));\r\n\t\tleft: max(30vw, calc(50vw - 350px));\r\n\t\t/* margin: max(20vh, calc(40vh - 250px)) auto; */\r\n\t\t/* z-index: 2; */\r\n\t\twidth: min(40vw, 700px);\r\n\t\theight: min(40vh, 500px);\r\n\t\ttext-align: center;\r\n\r\n\t\tcolor: rgb(255, 247, 238);\r\n\t}\r\n\r\n\t#chooseWords.hide{\r\n\t\tdisplay: none;\r\n\t}\r\n\r\n\t#words{\r\n\t\twidth: 100%;\r\n\t}\r\n\r\n\t#submitWords{\r\n\t\twidth: 50%;\r\n\t}\r\n\r\n</style>",
    "<script>\r\n    import { onMount, afterUpdate } from 'svelte';\r\n    import { fly } from 'svelte/transition';\r\n    export let words;\r\n    let clientY = 0;\r\n    let clientX = 0;\r\n\r\n    let mouseListener;\r\n    let touchListener;\r\n\r\n    let top = words.length+1;\r\n\r\n    function handleDrag(e){\r\n        if(e.type === \"mousedown\"){\r\n            mouseListener = function(mouseEvent) {\r\n                clientY = mouseEvent.clientY;\r\n                clientX = mouseEvent.clientX;\r\n\r\n                e.target.style.top = clientY - e.target.height.baseVal.value/2 + \"px\";\r\n                e.target.style.left = clientX - e.target.width.baseVal.value/2 + \"px\";\r\n                e.target.style.filter = \"drop-shadow(2px 2px 2px #2b2b2173)\";\r\n            }\r\n            document.addEventListener(\"mousemove\", mouseListener);\r\n            e.target.style.zIndex = top;\r\n            top++;\r\n        }else if(e.type === \"touchstart\"){\r\n            touchListener = function(touchEvent) {\r\n                clientY = touchEvent.changedTouches[0].pageY;\r\n                clientX = touchEvent.changedTouches[0].pageX;\r\n\r\n                e.target.style.top = clientY - e.target.height.baseVal.value/2 + \"px\";\r\n                e.target.style.left = clientX - e.target.width.baseVal.value/2 + \"px\";\r\n                e.target.style.filter = \"drop-shadow(2px 2px 2px #2b2b2173)\";\r\n            }\r\n            document.addEventListener(\"touchmove\", touchListener);\r\n            e.target.style.zIndex = top;\r\n            top++;\r\n        }\r\n    }\r\n\r\n    function handleRelease(e){\r\n        e.target.style.filter = \"drop-shadow(1px 1px 1px #2b2b2149)\";\r\n        document.removeEventListener(\"mousemove\", mouseListener);\r\n        document.removeEventListener(\"touchmove\", touchListener);\r\n    }\r\n\r\n    function generateTextStyle(){\r\n        let size = (1.7 + Math.random()*1.2).toFixed(2) + \"rem\";\r\n        let colors = [\"#333\", \"#271d1d\", \"#1d1d27\", \"#464646\", \"#0e0e0a\", \"#8a1503\", \"#2a3980\", \"#282894\"];\r\n        let fonts = [\"serif\", \"sans-serif\", \"helvetica\", \"arial\", \"Times New Roman\", \"Georgia\", \"Book Antiqua\", \"Impact\", \"Lucida Sans Unicode\", \"Courier New\", \"Lucida Console\", \"Trebuchet MS\"];\r\n\r\n        return `font-size: ${size};\r\n                fill: ${colors[Math.floor(Math.random()*colors.length)]};\r\n                font-family: ${fonts[Math.floor(Math.random()*fonts.length)]};`;\r\n    }\r\n\r\n    function generateWords(){\r\n        let svgs = Array.from(document.getElementsByTagName(\"svg\"));\r\n        for(let i = 0; i < svgs.length; i++){\r\n            let text = svgs[i].lastChild;\r\n            let height = text.getBBox().height;\r\n            let width = text.getBBox().width;\r\n\r\n            let calcHeight = height + text.getBBox().y + Math.random()*3;\r\n            let calcWidth = width + text.getBBox().x + Math.random()*15;\r\n\r\n            svgs[i].setAttribute(\"height\", calcHeight.toFixed(2));\r\n            svgs[i].setAttribute(\"width\", calcWidth.toFixed(2));\r\n\r\n            let x = Math.random()*3;\r\n            let y = Math.random()*8;\r\n\r\n            let x1 = Math.random()*20;\r\n            let y1 = y - Math.random()*y;\r\n\r\n            let x2 = Math.random()*(calcWidth - x1);\r\n            let y2 = y - Math.random()*y;\r\n\r\n            let cutTop = `M ${x} ${y} \r\n             C ${x1.toFixed(2)} ${y1.toFixed(2)}, \r\n               ${x2.toFixed(2)} ${y2.toFixed(2)}, \r\n               ${calcWidth.toFixed(2)} 0 \r\n             L ${calcWidth.toFixed(2)} ${calcHeight.toFixed(2)} \r\n             L 0 ${calcHeight.toFixed(2)}  \r\n             Z`;\r\n\r\n            let cutBottom = `M ${x} ${y} \r\n             L ${calcWidth.toFixed(2)} 0\r\n             L ${calcWidth.toFixed(2)} ${calcHeight.toFixed(2)} \r\n             C ${(calcWidth - x2).toFixed(2)} ${(calcHeight - y2).toFixed(2)}, \r\n               ${(calcWidth - x1).toFixed(2)} ${(calcHeight - y1).toFixed(2)}, \r\n               0 ${calcHeight.toFixed(2)} \r\n             Z`\r\n\r\n            svgs[i].firstChild.setAttribute(\"d\",[cutTop, cutBottom][Math.floor(Math.random()*2)]);\r\n\r\n            //adding a clip path that hopefully cuts off text that flows outside of the paper, hard to test though\r\n            let paper = svgs[i].firstChild;\r\n            let paperPath = paper.cloneNode(true);\r\n            svgs[i].querySelector(\":nth-child(2)\").append(paperPath);\r\n\r\n            //place randomly on page\r\n            svgs[i].style.top = `${Math.random()*window.innerHeight - 10}px`;\r\n            svgs[i].style.left = `${Math.random()*window.innerWidth - 20}px`;\r\n\r\n            \r\n        }\r\n    }\r\n\r\n    onMount(() => {\r\n        generateWords();\r\n    })\r\n\r\n    afterUpdate(function() {\r\n        generateWords();\r\n        // let svgs = Array.from(document.getElementsByTagName(\"svg\"));\r\n        // for(let i = 0; i < svgs.length; i++){\r\n        //     fly(svgs[i], { x: 100, y: 200, duration: 2000, opacity: 1 });\r\n        // }\r\n        // fly(this, { x: 100, y: 200, duration: 2000, opacity: 1 })\r\n    })\r\n</script>\r\n\r\n{#each words as word, i}\r\n<svg \r\n    on:mousedown={handleDrag}\r\n    on:mouseup={handleRelease}\r\n\r\n    on:touchstart={handleDrag}\r\n    on:touchend={handleRelease}\r\n>\r\n    <path \r\n    fill=\"hsl(44, 100%, {97+Math.floor(Math.random()*4)}%)\"\r\n    >    \r\n    </path>\r\n\r\n    <clipPath id={`paper${i}`}>\r\n    </clipPath>\r\n    \r\n    <text \r\n        x={(5 + Math.random()*20).toFixed(2)}\r\n        y={(35 + Math.random()*20).toFixed(2)}\r\n        style={generateTextStyle()}\r\n        clip-path={`url(#paper${i})`}\r\n    >\r\n            {word}    \r\n        </text>\r\n\r\n</svg>\r\n    \r\n{/each}\r\n\r\n\r\n<style>\r\n    svg{\r\n        position: absolute;\r\n        user-select: none;\r\n        filter: drop-shadow(1px 1px 1px #2b2b2149);\r\n    }\r\n\r\n    path{\r\n        /* box-shadow: 2px 2px 5px 0px rgba(0,0,0,0.25); */\r\n        pointer-events: none;\r\n    }\r\n\r\n    text{\r\n        pointer-events: none;\r\n    }\r\n\r\n    svg:hover{\r\n        cursor: grab;\r\n    }\r\n\r\n    svg:active, svg:focus, path:active, text:active{\r\n        cursor: grabbing!important;\r\n        \r\n        filter: drop-shadow(2px 2px 2px #2b2b2173);\r\n    }\r\n</style>"
  ],
  "names": [],
  "mappings": "AA0DC,0BAAY,CAAC,AACZ,QAAQ,CAAE,KAAK,CACf,GAAG,CAAE,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAClC,IAAI,CAAE,IAAI,IAAI,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAGnC,KAAK,CAAE,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,CACvB,MAAM,CAAE,IAAI,IAAI,CAAC,CAAC,KAAK,CAAC,CACxB,UAAU,CAAE,MAAM,CAElB,KAAK,CAAE,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,GAAG,CAAC,AAC1B,CAAC,AAMD,oBAAM,CAAC,AACN,KAAK,CAAE,IAAI,AACZ,CAAC,AAED,0BAAY,CAAC,AACZ,KAAK,CAAE,GAAG,AACX,CAAC;ACyEE,iBAAG,CAAC,AACA,QAAQ,CAAE,QAAQ,CAClB,WAAW,CAAE,IAAI,CACjB,MAAM,CAAE,YAAY,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,AAC9C,CAAC,AAED,kBAAI,CAAC,AAED,cAAc,CAAE,IAAI,AACxB,CAAC,AAED,kBAAI,CAAC,AACD,cAAc,CAAE,IAAI,AACxB,CAAC,AAED,iBAAG,MAAM,CAAC,AACN,MAAM,CAAE,IAAI,AAChB,CAAC,AAED,iBAAG,OAAO,CAAE,iBAAG,MAAM,CAAE,kBAAI,OAAO,CAAE,kBAAI,OAAO,CAAC,AAC5C,MAAM,CAAE,QAAQ,UAAU,CAE1B,MAAM,CAAE,YAAY,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,SAAS,CAAC,AAC9C,CAAC"
}